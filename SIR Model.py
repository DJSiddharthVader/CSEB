import numpy as np
import numpy.random as npr
import matplotlib.pyplot as plt

'''THIS CODE IS STILL BEING DEVELOPED, THE FULLY FUNCTIONING PARTS ARE POSTED HERE BUT IT WILL BE UPDATED WITH FUNCTIONS THAT PROVIDE OTHER 
METHODS OF VISUALIZING THE DATA THE MODEL GENERATES'''

''' This is an epidemic model known as the SIR model. In this model a population is divided into 3 classes, succeptible, infected and 
recovered. Succeptibles can become and infceted and those infected can become recovered, there are no other ways to transfer between classes.
The simulation (cb_sim) ends after either the infected population reaches 0 (meaning no other movement between classes can happen)or nmax 
generation have passed. Different methods of presenting and visualizing data generated by running the simulation are also included. run10k
is a function that prints all the potential outcomes for the number of succeptible, infected and recovered individuals over
generations and prints the most likely one.'''

#No Vital Dynamics

def infectionrate(S0, probI):
    """takes a probability(probS) in decimal form and finds the distribution of states (succeptible or infected) over S0
    random trials and return the  new number of succeptible individuals after infection is allowed to occur"""
    inf = 0
    for x in range(S0):
        bi = npr.uniform(0, 1)
        if bi < probI:
            inf += 1
        else:
            inf += 0
    return inf

def recoveryrate(I0, probR):
    """ takes a probability(probR) in decimal form and finds the distribution of states (infected or recovered) over I0
    random trials and returns the number of newly recovered individuals after recovery is allowed to occur
    :param IR: infected population
    :param probR: recovery probability
    :return: recovered individuals
    """
    rec = 0
    for x in range(I0):
        bi = npr.uniform(0, 1)
        if bi < probR:
            rec += 1
        else:
            rec += 0
    return rec

def cb_gen(S0, I0, R0, probInf, probRe):
    """find the number of succeptible, infected and recovered individuals in a population over 1 generation under
    the chain binomial epidemic model given an infection probability (probInf), a recovery probability (probRe)
    the initial number of succeptibles(S0), infected(I0) and recovered (R0). It rerurns the updated number of 
    succeptibles, infected and recovered (new_S, new_I, new_R)"""

    PI = 1- (1 - probInf) ** (I0)
    PR = 1- (1 - probRe) ** (R0)
    new_S = S0 - infectionrate(S0, PI)
    new_R = recoveryrate(I0, PR) + R0
    new_I = I0 + S0 - new_S - new_R + R0
    if new_I + new_S + new_R != S0 + I0 + R0:
        raise ValueError
    return new_S, new_I, new_R

#cb_gen(20, 5, 7, 0.2, 0.4)

def cb_sim(S0, I0, R0, probSuc, probRec, nmax = 10):
    """simulates the chain binomial epidemic model cb_gen(S0, I0, R0, probSuc, probRec)  untill the number of infected 
    is 0 or for nmax generations (10 by deafault) and returns the numberof succeptible, infected and recovered
    individuals in each generation in three tuples SG, IG, RG respectively."""
    SG = []
    IG = []
    RG = []
    SG.append(S0)
    IG.append(I0)
    RG.append(R0)
    Snew, Inew, Rnew = cb_gen(S0, I0, R0, probSuc, probRec)
    SG.append(Snew)
    IG.append(Inew)
    RG.append(Rnew)
    for i in range(nmax - 1):
        Snew, Inew, Rnew = cb_gen(Snew, Inew, Rnew, probSuc, probRec)
        if Inew == 0:
            SG.append(Snew)
            IG.append(Inew)
            RG.append(Rnew)
            return tuple(SG), tuple(IG), tuple(RG)
        SG.append(Snew)
        IG.append(Inew)
        RG.append(Rnew)
    return SG, IG, RG



def cb_sim_graph(S0 = 2200, I0 = 3, R0 = 5, probInf = 0.1, probRec = 0.1, nmax = 10):
    '''Uses the cb_sim() function to generate data for one instance of an infection (either 10 generations or until there
    are 0 infected people. It then plots the number of succeptibles, infected and recovered against the number of generations.
    It also prints the Y vlaues for each populations
    '''
    x, y, z, = cb_sim(S0, I0, R0, probInf, probRec, nmax)
    print("Susceptible", x,'\n',"Infected  ", y, '\n' "Recovered  ",z)
    plt.plot( x, 'r--', y, 'g-', z, 'b:')
    plt.axis([0,len(x),-1,S0+I0+R0])
    plt.legend(("Succeptible", "Infected", "Recovered"))
    plt.xlabel("Generations")
    plt.ylabel("Populations")
    plt.show()




